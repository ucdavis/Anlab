<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllCodes" xml:space="preserve">
    <value>SELECT distinct [ACODE] as Id
       FROM [LABWORKS].[dbo].[ANALYSIS]
	   WHERE        [ACODE] != '()' and SUBSTRING(ACODE, 1, 1) != '-' and AMODDATE &gt; '2017-01-01'
	   ORDER BY ACODE</value>
  </data>
  <data name="AnlabClientDetailsLookup" xml:space="preserve">
    <value>SELECT	dbo.USERFLDS.LOCCODE AS ClientId, 
	USERFLDS.CPYEMAIL AS CopyEmail, 
	USERFLDS.SUBEMAIL AS SubEmail, 
	USERFLDS.CPYPHONE AS CopyPhone, 
	USERFLDS.SUBPHONE AS SubPhone,
	dbo.LOCLIST.REPADD1 AS Name, 
	dbo.LOCLIST.[INVADD4] as DefaultAccount,
	dbo.LOCLIST.[INVADD2] as Department
FROM	dbo.USERFLDS INNER JOIN
	dbo.LOCLIST ON dbo.USERFLDS.LOCCODE = dbo.LOCLIST.LOCCODE
WHERE	dbo.USERFLDS.LOCCODE = @clientId  OR dbo.USERFLDS.SUBEMAIL = @clientId</value>
    <comment>Get the clinet info associated with the client id</comment>
  </data>
  <data name="AnlabCodesInGroups" xml:space="preserve">
    <value>SELECT distinct 
SG2.SGACODE as Code
FROM [LABWORKS].[dbo].[SGTESTS] as SG1 , [LABWORKS].[dbo].[SGTESTS] as SG2
where SG1.SGACODE in @GroupCodes 
and SG1.ACODE = SG2.ACODE 
and SG2.SGACODE not in @GroupCodes</value>
    <comment>List of codes that are a part of group discounts. The group code is excluded.
This is a self join</comment>
  </data>
  <data name="AnlabItemPrices" xml:space="preserve">
    <value>DECLARE @setup int;
SELECT @setup = APRICE from dbo.ANL_LIST where ACODE = 'SETUP'

SELECT[ANL_LIST].[ACODE] as Id,[APRICE] as InternalCost, [ANAME] as 'Name', [WORKUNIT] as Multiplier, @setup as SetupCost,
CASE WHEN [NONREP] = '0' THEN 0 ELSE 1 END as NONREP,
CASE WHEN [NONINV] = '0' THEN 0 ELSE 1 END as NONINV,
CASE WHEN CAST(SUBSTRING(CASNUMB, 0, 4) as INT) != 0 THEN CAST(SUBSTRING(CASNUMB, 0, 4) as varchar(20)) ELSE NULL END as SOP
FROM [ANL_LIST] INNER JOIN [ANALYTES] ON [ANL_LIST].[ACODE] = [ANALYTES].[ACODE]
where ANL_LIST.ACODE in @codes

UNION

SELECT [SGTESTS].[ACODE] as Id,[APRICE] as InternalCost, [ANAME] as 'Name', [WORKUNIT] as Multiplier, @setup as SetupCost,
CASE WHEN [NONREP] = '0' THEN 0 ELSE 0 END as NONREP,
CASE WHEN [NONINV] = '0' THEN 0 ELSE 1 END as NONINV,
NULL as SOP
FROM [ANL_LIST] INNER JOIN [SGTESTS] ON [ANL_LIST].[ACODE] = [SGTESTS].SGACODE
where SGTESTS.SGANUM = 1 AND SGTESTS.ACODE in @codes</value>
    <comment>List of prices related values from Anlab.</comment>
  </data>
  <data name="AnlabPriceForCode" xml:space="preserve">
    <value>DECLARE @setup int;
SELECT @setup = APRICE from dbo.ANL_LIST where ACODE = 'SETUP'
SELECT[ANL_LIST].[ACODE] as Id,[APRICE] as InternalCost,[ANAME] as 'Name',[WORKUNIT] as Multiplier, @setup as SetupCost , CAST(SUBSTRING(CASNUMB, 0, 4) as INT) as SOP, 
CASE WHEN [NONREP] = '0' THEN 0 ELSE 1 END as NONREP , 
CASE WHEN [NONINV] = '0' THEN 0 ELSE 1 END as NONINV
FROM [ANL_LIST] INNER JOIN [ANALYTES] ON [ANL_LIST].[ACODE] = [ANALYTES].[ACODE]  where [ANL_LIST].[ACODE]  = @code </value>
    <comment>Price for a code.</comment>
  </data>
  <data name="AnlabRushMultiplierForOrder" xml:space="preserve">
    <value>SELECT DISTINCT([RUSHYNP]) as RushMultiplier FROM [dbo].[SUSERFLDS] where RUSHYNP != 'N' and WORK_REQ = @RequestNum</value>
  </data>
  <data name="AnlabSampleDetails" xml:space="preserve">
    <value>SELECT COUNT(LOCCODE) AS Quantity, LOCCODE as ClientId, SAMPCOL as Disposition, convert(date, REPDATE,1) as ReportDate FROM dbo.SAMPLE
GROUP BY LOGBATCH, LOCCODE, SAMPCOL, convert(date, REPDATE,1) 
HAVING (LOGBATCH = @RequestNum)</value>
  </data>
  <data name="AnlabTestConnection" xml:space="preserve">
    <value>SELECT TOP (1) [ACODE]      
  FROM [LABWORKS].[dbo].[ANL_LIST]</value>
  </data>
  <data name="AnlabTestsRunForOrder" xml:space="preserve">
    <value>SELECT DISTINCT [ACODE] as Id
FROM            [SAMPLE] INNER JOIN
                         [ANALYSIS] ON [SAMPLE].[SAMPNO] = [ANALYSIS].[SAMPNO]
WHERE        [ACODE] != '()' and SUBSTRING(ACODE, 1, 1) != '-'  and [SAMPLE].[LOGBATCH] = @RequestNum</value>
    <comment>List of codes </comment>
  </data>
  <data name="FinishedInLabworks" xml:space="preserve">
    <value>    SELECT TOP (10) 
      r.[RESULT]
FROM [LABWORKS].[dbo].[SAMPLE] s
INNER JOIN [LABWORKS].[dbo].[RESULT] r
    ON s.[SAMPNO] = r.[SAMPNO]
WHERE s.LOGBATCH = @requestNum
  AND r.ACODE = '()'</value>
    <comment>If this returns a value (initital) it means it is finished in labworks</comment>
  </data>
  <data name="FinishedInLabworksList" xml:space="preserve">
    <value>SELECT distinct
  s.[LOGBATCH] as RequestNum,
  r.[RESULT] as Initials
FROM [LABWORKS].[dbo].[SAMPLE] s
LEFT JOIN [LABWORKS].[dbo].[RESULT] r
    ON s.[SAMPNO] = r.[SAMPNO]
WHERE r.ACODE = '()' and s.LOGBATCH IN @RequestList</value>
    <comment>Passed a list of work requests, it returns a list of all those that have been finished</comment>
  </data>
</root>